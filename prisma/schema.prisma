// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String                 @id @default(uuid())
  name                  String?
  email                 String?                @unique
  password              String?
  role                  UserRole               @default(USER)
  emailVerified         DateTime?
  image                 String?
  isTwoFactorEnabled    Boolean                @default(false)
  accounts              Account[]
  twoFactorConfirmation TwoFactorConfirmation?
  forms                 Form[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId])
  @@map("two_factor_confirmations")
}

model Form {
  id String @id @default(uuid())

  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  published       Boolean           @default(false)
  name            String
  description     String            @default("")
  content         String            @db.LongText
  visits          Int               @default(0)
  submissions     Int               @default(0)
  sharedUrl       String            @unique @default(uuid())
  createdAt       DateTime          @default(now())
  formSubmissions FormSubmissions[]

  @@unique([name, userId])
  @@map("forms")
}

model FormSubmissions {
  id String @id @default(uuid())

  form      Form?    @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId    String
  content   String   @default("[]")
  createdAt DateTime @default(now())

  @@map("form_submissions")
}
